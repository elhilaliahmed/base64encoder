     1                                  ; Executable name : base64encoder
     2                                  ; Created         : 30/11/2020
     3                                  ; Last updated	  : 
     4                                  ; Description	  : A simple program in assembly that can encodes binary values to base64.
     5                                  
     6                                  ; Important registers:
     7                                  ; r10 holds the first byte
     8                                  ; r11 holds the second byte
     9                                  ; r12 holds the third byte
    10                                  
    11                                  
    12                                  SECTION .data
    13                                  
    14                                      ; Base64 Base64Table Implementation
    15 00000000 414243444546474849-         Base64Table:         db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    15 00000009 4A4B4C4D4E4F505152-
    15 00000012 535455565758595A61-
    15 0000001B 62636465666768696A-
    15 00000024 6B6C6D6E6F70717273-
    15 0000002D 7475767778797A3031-
    15 00000036 32333435363738392B-
    15 0000003F 2F                 
    16                                      ; Initialize a buffer for writing to stdout
    17 00000040 30303030                    Result:         db "0000"
    18                                      ResultLength:      equ $-Result
    19                                  	
    20                                  	; CONSTANTS
    21                                  	
    22                                  	SYS_READ	equ 0
    23                                  	SYS_WRITE		equ 1
    24                                  	SYS_EXIT	equ 60
    25                                  	STDIN			equ 0
    26                                  	STDOUT		equ 1
    27                                  
    28                                      
    29                                  SECTION .bss
    30                                  
    31                                      ; Reserve a buffer for reading from stdin
    32                                      BufferLength:       equ 3
    33 00000000 <res 00000003>              Buffer:          resb BufferLength
    34                                  
    35                                  SECTION .text			; Section containing code
    36                                  global 	_start			; Linker needs this to find the entry point!
    37                                  
    38                                  _start:
    39                                       
    40                                  read:
    41                                      
    42 00000000 B800000000                  mov rax, SYS_READ                      ; code for system read call
    43 00000005 BF00000000                  mov rdi, STDIN                      ; standard Input
    44 0000000A 48BE-                       mov rsi, Buffer                  ; destination buffer
    44 0000000C [0000000000000000] 
    45 00000014 BA03000000                  mov rdx, BufferLength               ; maximum number of bytes to read
    46 00000019 0F05                        syscall
    47                                      
    48                                  	;xor r10, r10
    49                                  	;xor r11, r11
    50 0000001B 4D31E4                  	xor r12, r12
    51                                  
    52 0000001E 4883F800                    cmp rax, 0                      ; did we receive any bytes?
    53 00000022 0F848A010000                je exit                         ; if not: exit the program
    54                                  
    55                                      ; Prepare registers for loop
    56 00000028 4883F801                    cmp rax, 1                      ; compares value of r11 with 1
    57 0000002C 740B                    	je convertOneByte			; if the value equals 1, jump to the convertOneByte procedure
    58                                  	
    59 0000002E 4883F802                    cmp rax, 2                      ; compares value of r11 with 2
    60 00000032 7453                        je convertTwoBytes			; if the value equals 2, jump to the convertTwoBytes procedure
    61                                  	
    62 00000034 E9CA000000              	jmp convertThreeBytes	; if the value greater or equals 3, jump to the convertThreeBytes procedure
    63                                      
    64                                  	
    65                                  convertOneByte:  
    66                                  
    67                                      ; Read a single byte from Buffer and store it to rax and rbx
    68 00000039 8A0425[00000000]            mov al, byte [Buffer]            ; from memory: copy 1st byte to rax
    69 00000040 4989C2                      mov r10, rax                    ; from rax: copy 1st byte to r10
    70                                      
    71                                     
    72 00000043 4C89D0                      mov rax, r10                    ; copy r10 to rax
    73 00000046 24FC                        and al, 0fch                    ; mask out the last 2 bits from right
    74 00000048 C0E802                      shr al, 2h                       ; get rid of the 2 last bits from right
    75 0000004B 8A80[00000000]              mov al, byte [Base64Table + rax]        ; look up base64 letter
    76 00000051 880425[40000000]            mov byte [Result], al        ; insert into Result
    77                                  
    78 00000058 4C89D0                      mov rax, r10                    ; copy r10 to rax
    79 0000005B 2403                        and al, 3h                    ; mask out the last 2 bits from right
    80 0000005D C0E004                      shl al, 4h                       ; multiply by 4
    81 00000060 C0EB04                      shr bl, 4h                       ; divide by 4
    82 00000063 08D8                        or al, bl                       						; merge al and bl
    83 00000065 8A80[00000000]              mov al, byte [Base64Table + rax]        ; look up base64 letter
    84 0000006B 880425[41000000]            mov byte [Result + 1], al      ; insert into Result
    85                                      
    86 00000072 C60425[42000000]3D          mov byte [Result + 2], "="     ; insert into Result
    87 0000007A C60425[43000000]3D          mov byte [Result + 3], "="     ; insert into Result
    88                                      
    89 00000082 E90B010000                  jmp print
    90                                  
    91                                  convertTwoBytes:
    92                                     ; Read a single byte from Buffer and store it to rax and rbx
    93 00000087 8A0425[00000000]            mov al, byte [Buffer]            ; from memory: copy 1st byte to rax
    94 0000008E 4989C2                      mov r10, rax                    ; from rax: copy 1st byte to r10
    95                                  
    96 00000091 8A0425[01000000]            mov al, byte [Buffer + 1]          ; from memory: copy 2nd byte to rax
    97 00000098 4989C3                      mov r11, rax                    ; from rax: copy 2nd byte to r11
    98                                      
    99                                      ; extract 6 bit chunks
   100 0000009B 4C89D0                      mov rax, r10                    ; copy r10 to rax
   101 0000009E 24FC                        and al, 0fch                   ; mask out the last 2 bits from right
   102 000000A0 C0E802                      shr al, 2h                       ; get rid of the 2 last bits from right
   103 000000A3 8A80[00000000]              mov al, byte [Base64Table + rax]        ; look up base64 letter
   104 000000A9 880425[40000000]            mov byte [Result], al        ; insert into Result
   105                                  
   106 000000B0 4C89D0                      mov rax, r10                    ; copy r10 to rax
   107 000000B3 4C89DB                      mov rbx, r11                    ; copy r11 to rbx
   108 000000B6 2403                        and al, 3h                    ; mask out the last 2 bits from right
   109 000000B8 C0E004                      shl al, 4h                       ; multiply by 4
   110 000000BB C0EB04                      shr bl, 4h                       ; divide by 4
   111 000000BE 08D8                        or al, bl                       ; merge al and bl
   112 000000C0 8A80[00000000]              mov al, byte [Base64Table + rax]        ; look up base64 letter
   113 000000C6 880425[41000000]            mov byte [Result+1], al      ; insert into Result
   114                                  
   115 000000CD 4C89D8                      mov rax, r11                    ; copy r11 to rax 
   116 000000D0 4C89E3                      mov rbx, r12                    ; copy r12 to rbx
   117 000000D3 4883E00F                    and rax, 0fh                   ; mask out the last 4 bits from left
   118 000000D7 48C1E002                    shl rax, 2h                      ; add 2 additional bits from right
   119 000000DB 4881E3C0000000              and rbx, 0c0h                   ; mask out the first 2 bits from left
   120 000000E2 48C1EB06                    shr rbx, 6h                      ; add 6 additional bits from left
   121 000000E6 4809D8                      or rax, rbx                     ; merge rax and rbx
   122 000000E9 8A80[00000000]              mov al, byte [Base64Table + rax]        ; look up base64 letter
   123 000000EF 880425[42000000]            mov byte [Result + 2], al      ; insert into Result
   124                                      
   125 000000F6 C60425[43000000]3D          mov byte [Result + 3], "="     ; insert into Result
   126                                      
   127 000000FE E98F000000                  jmp print
   128                                  	
   129                                  	
   130                                  	convertThreeBytes:
   131                                      
   132 00000103 8A0425[00000000]            mov al, byte [Buffer]            ; copy the first byte from memory to rax
   133 0000010A 4989C2                      mov r10, rax                    ; copy the first byte from rax to r10
   134                                  
   135 0000010D 8A0425[01000000]            mov al, byte [Buffer+1]          ;copy the second byte from memory to rax
   136 00000114 4989C3                      mov r11, rax                    ; copy the second byte from rax to r11
   137                                  
   138 00000117 8A0425[02000000]            mov al, byte [Buffer+2]          ; copy the third byte from memory to rax
   139 0000011E 4989C4                      mov r12, rax                    ; copy the third by from rax to r12
   140                                      
   141 00000121 4C89D0                      mov rax, r10                    ; copy r10 to rax
   142 00000124 24FC                        and al, 0fch                    ; mask out the last 2 bits from right
   143 00000126 C0E802                      shr al, 2h                       ; get rid of the 2 last bits from right
   144 00000129 8A80[00000000]              mov al, byte [Base64Table + rax]        ; loop up the corresponding base64 letter
   145 0000012F 880425[40000000]            mov byte [Result], al        ; insert into Result
   146                                  
   147 00000136 4C89D0                      mov rax, r10                    ; copy r10 to rax
   148 00000139 4C89DB                      mov rbx, r11                    ; copy r11 to rbx
   149 0000013C 2403                        and al, 3h                    ; mask out the last 2 bits from right
   150 0000013E C0E004                      shl al, 4h                       ; multiply by 4 
   151 00000141 C0EB04                      shr bl, 4h                       ; divide by 4
   152 00000144 08D8                        or al, bl                       ; merge al and bl
   153 00000146 8A80[00000000]              mov al, byte [Base64Table + rax]        ; look up base64 letter
   154 0000014C 880425[41000000]            mov byte [Result + 1], al      ; insert into Result
   155                                  
   156 00000153 4C89D8                      mov rax, r11                    ; copy r11 to rax 
   157 00000156 4C89E3                      mov rbx, r12                    ; copy r12 to rbx
   158 00000159 4883E00F                    and rax, 0fh                   ; mask out the last 4 bits from left
   159 0000015D 48C1E002                    shl rax, 2h                      ; multiply by 2
   160 00000161 4881E3C0000000              and rbx, 0c0h                   ; mask out the first 2 bits from left
   161 00000168 48C1EB06                    shr rbx, 6h                      ; divide by 6
   162 0000016C 4809D8                      or rax, rbx                     ; merge rax and rbx
   163 0000016F 8A80[00000000]              mov al, byte [Base64Table + rax]        ; look up base64 letter
   164 00000175 880425[42000000]            mov byte [Result+2], al      ; insert into Result
   165                                  
   166 0000017C 4C89E0                      mov rax, r12                    ; copy r12 to rax
   167 0000017F 4883E03F                    and rax, 3fh                   ; mask out the last 6 bits from right
   168 00000183 8A80[00000000]              mov al, byte [Base64Table + rax]        ; look up base64 letter
   169 00000189 880425[43000000]            mov byte [Result + 3], al      ; insert into Result
   170                                      
   171 00000190 EB00                        jmp print
   172                                  
   173                                  print:
   174                                  
   175 00000192 B801000000                  mov rax, SYS_WRITE                      ; sys_print
   176 00000197 BF01000000                  mov rdi, STDOUT                      ; file descriptor: stdout
   177 0000019C 48BE-                       mov rsi, Result              ; source buffer
   177 0000019E [4000000000000000] 
   178 000001A6 BA04000000                  mov rdx, ResultLength           ; # of bytes to print
   179 000001AB 0F05                        syscall
   180                                  
   181                                      ; Go back to read the next bytes from input
   182 000001AD E94EFEFFFF                  jmp read
   183                                  
   184                                  exit:
   185                                  
   186 000001B2 B83C000000                  mov rax, SYS_EXIT                     ; code for sys_exit
   187 000001B7 BF00000000                  mov rdi, 0                      ; return 0
   188 000001BC 0F05                        syscall                         ; make kenell call 
